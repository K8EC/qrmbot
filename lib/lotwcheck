#!/usr/bin/perl -w
# Lookup callsign in LoTW usage data.

# 2-clause BSD license.
# Copyright (c) 2018, 2019, 2020 molo1134@github. All rights reserved.

use strict;
use utf8;
use feature 'unicode_strings';
binmode(STDOUT, ":utf8");

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;
use Util;

# config
my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);
my $cachefile = $ENV{'HOME'} . "/.lotw-dates.txt";

my $exitnonzeroonerror = 1;
$exitnonzeroonerror = 0 if $username eq getEggdropUID();

my $url = "https://lotw.arrl.org/lotw-user-activity.csv";
my $maxage=86400; # 1 day

if ($#ARGV < 0 || length($ARGV[0]) == 0) {
  if ($username eq getEggdropUID()) {
    print "usage: !lotw [--loose] <callsign>\n";
  } else {
    print "usage: $0 <callsign>\n";
  }
  exit $exitnonzeroonerror;
}

# when calling from eggdrop, parameters may be packed into first parameter.
if ($#ARGV == 0 && $ARGV[0] =~ m/ /) {
  @ARGV = split / /, $ARGV[0];
}

my $exact = 1;
my $i = 0;
my $call = undef;

while ($i <= $#ARGV) {
  if ($ARGV[$i] =~ /--lo?ose/) {
    $exact = 0;
  } else {
    $call = uc $ARGV[$i];
    last;
  }
  $i++;
}

$call =~ s/[^A-Z0-9\/\$\^]//g;

if ($exact == 1 and not $call =~ m/[\$\^]/) {
  $call = "^${call}\$";
}

if ( ! -r $cachefile ) {
	#print "system 1\n";
  system "/usr/bin/curl --max-time 10 -s -k -L -o $cachefile '$url'";
}

if ( ! -r $cachefile ) {
  print "error: unable to read $cachefile\n";
  exit $exitnonzeroonerror;
}

my $now = time;


my (undef, undef, undef, undef, undef, undef, undef, $size, undef, $mtime, undef, undef, undef) = stat $cachefile;

my $age = $now - $mtime;

if ($age > $maxage or $size == 0) {
	#print "system 2\n";
  system "/usr/bin/curl --max-time 10 -s -k -L -o $cachefile '$url'";
}

$i = 0;
if (-r $cachefile) {
  open (INPUT, "<", $cachefile) or die "Can't open cache: $!";
  while (<INPUT>) {
    #print;
    chomp;
    my ($dxcall, $d, $t) = split(/,/);
    if ($dxcall =~ /$call/) {
      $dxcall =~ s/$call/bold($&)/e;
      print "$dxcall: LoTW $d $t\n";
      $i++;
    }
    last if $i > 3 and $username eq getEggdropUID();
  }
  close(INPUT);
} else {
  print "unable to read cache: $cachefile";
}

if ($i == 0) {
  print bold($call), ": LoTW not found\n";
  exit $exitnonzeroonerror;
}

if ($i > 3 and $username eq getEggdropUID()) {
  print "(truncated. see $url )\n";
}

exit 0;

