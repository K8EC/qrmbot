#!/usr/bin/perl -w

# Grid reference calculation.

# 2-clause BSD license.
# Copyright (c) 2018 molo1134@github. All rights reserved.

use strict;
use utf8;
use Encode qw(decode);
use feature 'unicode_strings';
binmode(STDOUT, ":utf8");

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;
use Location;

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);

# change this to 0 to always exit with success
our $exitnonzeroonerror = 1;
$exitnonzeroonerror = 0 if $username eq 'eggdrop';

our $mylat = undef;
our $mylon = undef;
my $de = undef;

my $loginfile = $ENV{'HOME'} . "/.qrzlogin";
if (-e ($loginfile)) {
  require($loginfile);
}

@ARGV = map { decode "utf-8", $_ } @ARGV;

if ($#ARGV < 0 || length($ARGV[0]) == 0) {
  if ($username eq 'eggdrop') {
    print "usage: !grid <grid>|<lat>,<lon>|<qth> [de <grid>|<lat>,<lon>|<qth>]\n";
  } else {
    print "usage: $0 <grid>|<lat>,<lon>|<qth> [de <grid>|<lat>,<lon>|<qth>]\n";
  }
  exit $exitnonzeroonerror;
}

my $query = undef;
my $type = undef;
my $raw = 0;

# eggdrop doesn't split args on spaces
@ARGV=split(' ', join(' ',@ARGV));

my $i = 0;
#while ($i <= $#ARGV) {
#  print "$i: $ARGV[$i++]\n";
#}
#$i = 0;

while ($i <= $#ARGV) {
  if ($ARGV[$i] =~ /^--raw$/i) {
    $raw = 1;
    $i++;
    next;
  }
  if (!defined($de) and $ARGV[$i] =~ /^(--geo|de|from)$/i) {
    $i++;
    $de = $ARGV[$i];
    $i++;
    next;
  }
  if (defined($de) and $ARGV[$i] =~ /^--geo$/) {
    # in case we have "de XXX --geo abc,xyz"
    last;
  }
  if (defined($de)) {
    $de = $de . " " . $ARGV[$i];
    $i++;
    next;
  }
  if (defined($query)) {
    $query = $query ." ". $ARGV[$i];
  } else {
    $query = $ARGV[$i];
  }
  $i++;
}

if (defined($de)) {
  my $degeo = argToCoords($de);
  ($mylat, $mylon) = split(',', $degeo) if defined $degeo;
}

my $result = argToCoords($query);
if (!defined $result) {
  print "error: unable to find \"$query\"\n" if $raw != 1;
  exit $exitnonzeroonerror;
}
my ($lat, $lon) = split(',', $result);

if ($raw == 1) {
  print "$lat,$lon\n";
  exit 0;
}

my $grid = coordToGrid($lat, $lon);
my $placename = geolocate($lat, $lon);

print bold($grid), ": $lat, $lon";
if (defined($placename)) {
  print ": ", bold($placename);
}

if (defined($mylat)) {

  my ($dist, $bearing) = distBearing($mylat, $mylon, $lat, $lon);
  my $localgrid = coordToGrid($mylat, $mylon);

  printf(" -- %.1f km, %.0fÂ° from %s", $dist, $bearing, $localgrid);
}
print "\n";

exit 0;

# vim: set ts=8 sw=2 sts=2
