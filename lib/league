#!/usr/bin/perl
# get clublog DXCC league status
#
# 2-clause BSD license.
# Copyright (c) 2021,2022 molo1134@github. All rights reserved.

use strict;
use utf8;
use Encode qw(decode);
use feature 'unicode_strings';
binmode(STDOUT, ":utf8");

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;
use Util;

use Time::Piece ();
use JSON qw( decode_json );
use POSIX qw(strftime);

@ARGV = map { decode "utf-8", $_ } @ARGV;
# eggdrop doesn't split args on spaces
@ARGV=split(' ', join(' ',@ARGV));

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);
# change this to 0 to always exit with success
our $exitnonzeroonerror = 1;
$exitnonzeroonerror = 0 if $username eq getEggdropUID();

my $club = 187; # reddit club
my $mode = 0;   # no mode filter
my $target = undef;
my $sort = undef;

my $i = 0;
while ($i <= $#ARGV) {
  if (isNumeric($ARGV[$i])) {
    $club = $ARGV[$i];
  } elsif ($ARGV[$i] =~ /--(cw|morse)/) {
    $mode = 1;
  } elsif ($ARGV[$i] =~ /--(ssb|phone)/) {
    $mode = 2;
  } elsif ($ARGV[$i] =~ /--(digi|data)/) {
    $mode = 3;
  } elsif ($ARGV[$i] =~ /--slots/) {
    $sort = "s";
  } else {
    $target = $ARGV[$i] if not defined $target;
  }
  $i++;
}

my $url = "https://secure.clublog.org/league_api.php?date=3&mode=${mode}&club=${club}";

local $/;   # read entire file -- FIXME: potentially memory hungry
open (JSON, '-|', "curl --max-time 60 -s -k -L '$url'");
my $json = <JSON>;
close(JSON);
my $j = decode_json($json) or die "parse error: $json\n";

my @standings = @{$j};

if (defined $sort and $sort eq "s") {
  # sort by slots
  @standings = sort { $b->[3] <=> $a->[3] } ( @{$j} )
}

my $limit = 20;
$limit = 10 if $username eq getEggdropUID();
my $year = strftime("%Y", gmtime(time()));
print "Clublog standings for $year: ";
print "\n" if $username ne getEggdropUID();
my $found = 0;
if (not defined $target) {
  my $i = 0;
  foreach my $standing (@standings) {
    my (undef, $call, $dxcc, $sluts) = @{$standing};
    my $rank = ++$i;
    print "$rank: $call $dxcc/$sluts" if $rank != 1;
    print "$rank: " . bold($call). " " . bold($dxcc) . "/$sluts" if $rank == 1;
    $limit--;
    print "\n" if $username ne getEggdropUID();
    print "; " if $username eq getEggdropUID() and $limit >= 1;
    last if $limit < 1;
  }
} else {
  my $i = 0;
  foreach my $standing (@standings) {
    my (undef, $call, $dxcc, $sluts) = @{$standing};
    my $rank = ++$i;
    if (uc $call eq uc $target) {
      print "$rank: ". bold($call) . " $dxcc/$sluts";
      print "\n" if $username ne getEggdropUID();
      $found = 1;
      last;
    }
  }
  print "not found" if $found == 0;
}
print " -- https://clublog.org/league.php?club=$club\n";
