#!/usr/bin/perl

# coronavirus info for qrmbot
# written by aa4jq

use strict;
use utf8;
use feature 'unicode_strings';
binmode(STDOUT, ":utf8");

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Util;
use Colors;

use List::Util qw(sum);

# disable "experimental" warning on smart match operator use
no if $] >= 5.018, warnings => "experimental::smartmatch";

if ($ARGV[0] =~ /about/i){
  print "Current global coronavirus cases as reported by WHO and others. ";
  print "Source: https://www.worldometers.info/coronavirus/coronavirus-cases\n";
  exit 0;
}

# eggdrop doesn't split args on spaces
@ARGV=split(' ', join(' ',@ARGV));

my @interest;
my @states;

my @statesandterritories = ("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE",
  "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA",
  "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND",
  "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA",
  "WV", "WI", "WY", "DC", "GU", "AS", "MP", "PR", "VI", "UM", "FM", "MH", "PW",
  "AA", "AE", "AP");

my %stateToName;
$stateToName{US} = "National";
$stateToName{AK} = "Alaska";
$stateToName{AL} = "Alabama";
$stateToName{AR} = "Arkansas";
$stateToName{AZ} = "Arizona";
$stateToName{CA} = "California";
$stateToName{CO} = "Colorado";
$stateToName{CT} = "Connecticut";
$stateToName{DC} = "District of Columbia";
$stateToName{DE} = "Delaware";
$stateToName{FL} = "Florida";
$stateToName{GA} = "Georgia";
$stateToName{HI} = "Hawaii";
$stateToName{IA} = "Iowa";
$stateToName{ID} = "Idaho";
$stateToName{IL} = "Illinois";
$stateToName{IN} = "Indiana";
$stateToName{KS} = "Kansas";
$stateToName{KY} = "Kentucky";
$stateToName{LA} = "Louisiana";
$stateToName{MA} = "Massachusetts";
$stateToName{MD} = "Maryland";
$stateToName{ME} = "Maine";
$stateToName{MI} = "Michigan";
$stateToName{MN} = "Minnesota";
$stateToName{MO} = "Missouri";
$stateToName{MS} = "Mississippi";
$stateToName{MT} = "Montana";
$stateToName{NC} = "North Carolina";
$stateToName{ND} = "North Dakota";
$stateToName{NE} = "Nebraska";
$stateToName{NH} = "New Hampshire";
$stateToName{NJ} = "New Jersey";
$stateToName{NM} = "New Mexico";
$stateToName{NV} = "Nevada";
$stateToName{NY} = "New York";
$stateToName{OH} = "Ohio";
$stateToName{OK} = "Oklahoma";
$stateToName{OR} = "Oregon";
$stateToName{PA} = "Pennsylvania";
$stateToName{RI} = "Rhode Island";
$stateToName{SC} = "South Carolina";
$stateToName{SD} = "South Dakota";
$stateToName{TN} = "Tennessee";
$stateToName{TX} = "Texas";
$stateToName{UT} = "Utah";
$stateToName{VA} = "Virginia";
$stateToName{VT} = "Vermont";
$stateToName{WA} = "Washington";
$stateToName{WI} = "Wisconsin";
$stateToName{WV} = "West Virginia";
$stateToName{WY} = "Wyoming";

# 2019 census population estimate
my %statePop;
$statePop{AK} = 731545;
$statePop{AL} = 4903185;
$statePop{AR} = 3017825;
$statePop{AS} = 55641;
$statePop{AZ} = 7278717;
$statePop{CA} = 39512223;
$statePop{CO} = 5758736;
$statePop{CT} = 3565287;
$statePop{DC} = 705749;
$statePop{DE} = 973764;
$statePop{FL} = 21477737;
$statePop{GA} = 10617423;
$statePop{GU} = 165718;
$statePop{HI} = 1415872;
$statePop{IA} = 3155070;
$statePop{ID} = 1787065;
$statePop{IL} = 12671821;
$statePop{IN} = 6732219;
$statePop{KS} = 2913314;
$statePop{KY} = 4467673;
$statePop{LA} = 4648794;
$statePop{MA} = 6949503;
$statePop{MD} = 6045680;
$statePop{ME} = 1344212;
$statePop{MI} = 9986857;
$statePop{MN} = 5639632;
$statePop{MO} = 6137428;
$statePop{MP} = 55194;
$statePop{MS} = 2976149;
$statePop{MT} = 1068778;
$statePop{NC} = 10488084;
$statePop{ND} = 762062;
$statePop{NE} = 1934408;
$statePop{NH} = 1359711;
$statePop{NJ} = 8882190;
$statePop{NM} = 2096829;
$statePop{NV} = 3080156;
$statePop{NY} = 19453561;
$statePop{OH} = 11689100;
$statePop{OK} = 3956971;
$statePop{OR} = 4217737;
$statePop{PA} = 12801989;
$statePop{PR} = 3193694;
$statePop{RI} = 1059361;
$statePop{SC} = 5148714;
$statePop{SD} = 884659;
$statePop{TN} = 6833174;
$statePop{TX} = 28995881;
$statePop{UT} = 3205958;
$statePop{VA} = 8535519;
$statePop{VI} = 104914;
$statePop{VT} = 623989;
$statePop{WA} = 7614893;
$statePop{WI} = 5822434;
$statePop{WV} = 1792147;
$statePop{WY} = 578759;

my $i = 0;
while ($i <= $#ARGV) {
  if ($ARGV[$i] =~ /^[A-Z][A-Z]$/i and uc $ARGV[$i] ~~ @statesandterritories) {
    push @states, uc $ARGV[$i];
  } else {
    push @interest, lc $ARGV[$i];
  }
  $i++;
}

# not updating reliably
#my $url = "https://raw.githubusercontent.com/alext234/coronavirus-stats/master/data/who-global-cases.csv";
my $url = "https://www.worldometers.info/coronavirus/";
my $params =
	"-eval 'set connection.receive_timeout = 10' " .
	"-eval 'set connection.retries = 1' " .
	"--dump";

if ($#interest >= 0) {
  my $found = 0;
  my ($cty, $cty_total, $cty_newcases, $cty_deaths, $cty_newdeaths, $cty_recovered, $cty_active, $cty_serious);
  my $in_country = 0;
  my $in_table = 0;
  open(HTTP, '-|', "curl --max-time 10 -s -k '$url'");
  binmode(HTTP, ":utf8");
  while (<HTTP>) {
#   print;
    $in_table = 1 if /<table id="main_table_countries_today"/;
    $in_table = 0 if m|</table>|;
    $in_country = 1 if /<tr style="">/ and $in_table == 1;
    if (not defined $cty and $in_country == 1) {
      $cty = $1 if
	m|<td style="font-weight: bold; font-size:15px; text-align:left;"><a class="mt_a" href="country/.*?">(.*?)</a></td>|;
      $cty = $1 if not defined $cty and
	m|<td style="font-weight: bold; font-size:15px; text-align:left;"><span style="color:#00B5F0; font-style:italic;\s*">(.*?)</span></td>|;
      $cty = $1 if not defined $cty and
	m|<td style="font-weight: bold; font-size:15px; text-align:left;">(.*?)</td>|;
      $cty =~ s/ //g if defined $cty;
    }

    if (defined $cty and not defined $cty_total and
	m|<td style="font-weight: bold; text-align:right">([0-9,]+)</td>|) {
      $cty_total = $1;
    }

    if (defined $cty_total and not defined $cty_newcases and
        m|<td style="font-weight: bold; text-align:right;background-color:#FFEEAA;">\s*([+0-9,]*)\s*</td>|) {
      $cty_newcases = $1;
    }
    if (defined $cty_total and not defined $cty_newcases and
        m|<td style="font-weight: bold; text-align:right;"></td>|) {
      $cty_newcases = "";
      next;
    }

    if (defined $cty_newcases and not defined $cty_deaths and
	m|<td style="font-weight: bold; text-align:right;">\s*([0-9,]*)\s*</td>|) {
      $cty_deaths = $1;
    }

    if (defined $cty_deaths and not defined $cty_newdeaths and
      #m|<td style="font-weight: bold; text-align:right;background-color:red; color:white">\s*([+0-9,]*)\s*</td>|) {
	m|^\s*text-align:right;background-color:red; color:white">\s*([+0-9,]*)\s*</td>|) {
      $cty_newdeaths = $1;
    }
    if (defined $cty_deaths and not defined $cty_newdeaths and
	m|<td style="font-weight: bold; text-align:right;"></td>|) {
      $cty_newdeaths = "";
    }

    if (defined $cty_newdeaths and not defined $cty_recovered and
	m|<td style="font-weight: bold; text-align:right">([0-9,]*)</td>|) {
      $cty_recovered = $1;
      next;
    }

    if (defined $cty_recovered and not defined $cty_active and
	m|<td style="text-align:right;font-weight:bold;">([0-9,]*)</td>|) {
      $cty_active = $1;
      next;
    }

    if (defined $cty_active and not defined $cty_serious and
	m|<td style="font-weight: bold; text-align:right">([0-9,]*)</td>|) {
      $cty_serious = $1;
      #print "$cty total $cty_total newcases: $cty_newcases deaths: $cty_deaths newdeaths: $cty_newdeaths recoverd: $cty_recovered active: $cty_active serious: $cty_serious\n";
      next;
    }

    if ($in_country == 1 and m|</tr>|) {
      $in_country = 0;
      $cty_deaths = 0 if not defined $cty_deaths or $cty_deaths eq "";
      $cty_recovered = 0 if not defined $cty_recovered or $cty_recovered eq "";
      $cty_serious = 0 if not defined $cty_serious or $cty_serious eq "";
      if ( lc $cty ~~ @interest ) {
	print bold($cty), ": ", yellow($cty_total), " confirmed cases and ",
	  red($cty_deaths), " deaths";
	print "; ", yellow("$cty_newcases"), " new cases" if $cty_newcases ne "";
	print "; ", red("$cty_newdeaths"), " new deaths" if $cty_newdeaths ne "";
	print "; ", lightblue($cty_recovered), " total recovered." if $cty_recovered > 0;
	print("\n");
	$found = 1;
      }
      ($cty, $cty_total, $cty_newcases, $cty_deaths, $cty_newdeaths, $cty_recovered, $cty_active, $cty_serious) =
	(undef, undef, undef, undef, undef, undef, undef, undef);
    }
  }
  close(HTTP);
  print "not found\n" if $found == 0;
  exit 0 if ($#states == -1);
}

if ($#states >= 0) {

  my @names;
  foreach my $s (@states) {
    push @names, $stateToName{$s};
  }

  my %caseTotals;
  my %deathTotals;

  my $prevCases = undef;
  my $prevDeaths = undef;

  my $url = "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv";
  open(CSV, '-|', "curl --max-time 10 -s -k '$url'");
  binmode(CSV, ":utf8");
  while (<CSV>) {
    chomp;
    my ($date, $state, $fips, $cases, $deaths) = split /,/;
    if ($state ~~ @names) {
      $caseTotals{"${state}_${date}"} = $cases;
      $deathTotals{"${state}_${date}"} = $deaths;
    }
  }
  close(CSV);

  foreach my $s (@states) {
    my $n = $stateToName{$s};
    my @cases = undef;
    my @deaths = undef;
    foreach my $k (sort keys %caseTotals) {
      if (rindex($k, $n, 0) == 0) {
	#print "$n: $caseTotals{$k}\n";
	push @cases, $caseTotals{$k};
	push @deaths, $deathTotals{$k};
      }
    }
    my @last31cases = @cases[$#cases-31 .. $#cases];
    my @last30caseDeltas;
    my @last30caseDeltasPerCap;
    for (my $i = 1; $i <= $#last31cases; $i++) {
      $last30caseDeltas[$i-1] = $last31cases[$i] - $last31cases[$i - 1];
      $last30caseDeltasPerCap[$i-1] = $last30caseDeltas[$i-1] / ($statePop{$s} / 100000.0);
    }

    #print "last 31: ", join(", ", @last31cases), "\n";
    #print "deltas: ", join(", ", @last30caseDeltas), "\n";
    #print "last 31 count: $#last31cases\n";
    #print "last 30 deltas count: $#last30caseDeltas\n";
    my @result = seriesToSparkLine(\@last30caseDeltas);
    my $min = $result[0];
    my $max = $result[1];
    my @spark = @result[2 .. $#result];

    #print "length: $#result\n";
    print "$s last 30d: ", join("", @spark), ": $min-$max new cases daily";

    @result = seriesToSparkLine(\@last30caseDeltasPerCap);
    $min = $result[0];
    $max = $result[1];
    @spark = @result[2 .. $#result]; #ignored, basically duplicates the case delta

    #print "percap: ", join(", ", @last30caseDeltasPerCap), "\n";
    #printf "percap: %s: %0.1f-%0.1f per 100k daily\n", join("", @spark), $min, $max;
    printf(" (%0.1f-%0.1f cases per 100k daily)", $min, $max);

    #print " -- ", join(" " , @last30caseDeltas[$#last30caseDeltas-6 .. $#last30caseDeltas]), " -- ";

    #my $caseavg = sum(@last30caseDeltas[$#last30caseDeltas-6 .. $#last30caseDeltas]) / 7.0;
    #my $percapavg = sum(@last30caseDeltasPerCap[$#last30caseDeltasPerCap-6 .. $#last30caseDeltas]) / 7.0;
    #printf("; avg %0.1f last 7 days (%0.1f per 100k)\n", $caseavg, $percapavg);

    my $sevenDayTotal = sum(@last30caseDeltas[$#last30caseDeltas-6 .. $#last30caseDeltas]);
    my $sevenDayPerCap = $sevenDayTotal / ($statePop{$s} / 100000.0);
    printf("; %d total for last 7d (%0.1f per 100k over 7d)\n", $sevenDayTotal, $sevenDayPerCap);
  }
  exit 0;
}

my $date;
my ($incases, $indeaths, $inrecov) = (0, 0, 0);
my ($c, $d, $r) = (0,0,0);
system("curl --max-time 10 -s -k '$url' > /tmp/c19-temp.html");
open(HTTP, '-|', "elinks --dump /tmp/c19-temp.html");
binmode(HTTP, ":utf8");
while (<HTTP>) {
  s/^\s*//;
  s/\[\d+\]//g;

  $date = "$1z" if /Last updated: (.*) GMT/;

  $incases = 1 if /Coronavirus Cases:/;
  $c = $1 if /^\s*([0-9,]+)\s*$/ and $incases == 1;
  $c =~ s/,//g if $incases == 1;
  $incases = 0 if $c != 0;

  $indeaths = 1 if /Deaths:/;
  $d = $1 if /^\s*([0-9,]+)\s*$/ and $indeaths == 1;
  $d =~ s/,//g if $indeaths == 1;
  $indeaths = 0 if $d != 0;

  $inrecov = 1 if /Recovered:/;
  $r = $1 if /^\s*([0-9,]+)\s*$/ and $inrecov == 1;
  $r =~ s/,//g if $inrecov == 1;
  $inrecov = 0 if $r != 0;
}
close(HTTP);

my $pct = sprintf("%0.1f", ($d/($d+$r)*100.0));
print "As of $date, there are ", yellow(commify($c)), " confirmed cases and ",
  red(commify($d)), " deaths, with ", lightblue(commify($r)),
  " recovered. Death rate ", red("$pct%"), " of resolved cases.\n";
exit 0;


sub seriesToSparkLine {
  my $arrayref = shift;
  my @series = @$arrayref;
  my $min = 999999999999;
  my $max = -999999999999;
  my @result;

  foreach my $e (@series) {
    $min = $e if $e < $min and $e > 0;
    $max = $e if $e > $max and $e > 0;
  }

  push @result, ($min, $max);

  foreach my $v (@series) {
    my $chr = valToBlock($v, $min, $max);
    push @result, $chr;
  }

  return @result;
}

# relative to min/max
sub valToBlock {
  my $v = shift;
  my $min = shift;
  my $max = shift;
  my $step = ($max - $min)/8;
  my $chr = " ";

  if ($v < $min) {
    $chr = " ";
  } elsif ($v <= ($min + ($step * 1))) {
    $chr = "▁";
  } elsif ($v <= ($min + ($step * 2))) {
    $chr = "▂";
  } elsif ($v <= ($min + ($step * 3))) {
    $chr = "▃";
  } elsif ($v <= ($min + ($step * 4))) {
    $chr = "▄";
  } elsif ($v <= ($min + ($step * 5))) {
    $chr = "▅";
  } elsif ($v <= ($min + ($step * 6))) {
    $chr = "▆";
  } elsif ($v <= ($min + ($step * 7))) {
    $chr = "▇";
  } elsif ($v <= ($min + ($step * 8))) {
    $chr = "▇";
  } else {
    $chr = "↑";
  }
  return $chr;
}

