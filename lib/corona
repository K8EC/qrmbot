#!/usr/bin/perl

# coronavirus info for qrmbot
# written by aa4jq

use strict;
use utf8;
use feature 'unicode_strings';
binmode(STDOUT, ":utf8");

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Util;

# disable "experimental" warning on smart match operator use
no if $] >= 5.018, warnings => "experimental::smartmatch";

if ($ARGV[0] =~ /about/i){
  print "Current global coronavirus cases as reported by WHO and others. ";
  print "Source: https://www.worldometers.info/coronavirus/coronavirus-cases\n";
  exit 0;
}

# eggdrop doesn't split args on spaces
@ARGV=split(' ', join(' ',@ARGV));

my @interest;

my $i = 0;
while ($i <= $#ARGV) {
  push @interest, lc $ARGV[$i];
  $i++;
}

# not updating reliably
#my $url = "https://raw.githubusercontent.com/alext234/coronavirus-stats/master/data/who-global-cases.csv";
my $url = "https://www.worldometers.info/coronavirus/";
my $params = 
	"-eval 'set connection.receive_timeout = 10' " .
	"-eval 'set connection.retries = 1' " .
	"--dump";

if ($#interest >= 0) {
  my $found = 0;
  open(HTTP, '-|', "curl -s -k '$url' | sed -e 's|</tr>|</tr>\\n|g;'");
  binmode(HTTP, ":utf8");
  while (<HTTP>) {
    if (m|padding-left:3px;">\s*(.*?)\s*</td>.*?align:right;?">\s*([0-9,]*)\s*</td>.*?align:right;?">\s*([0-9,]*)\s*</td>.*?text-align:right;?">\s*([0-9,]*)\s*</td>.*?font-weight:bold;">\s*([0-9,]+)\s*</td>.*?text-align:right;?">\s*([0-9,]*)\s*</td|) {
      my ($cty, $cty_total, $cty_deaths, $cty_recovered, $cty_active, $cty_serious) = ($1, $2, $3, $4, $5, $6);
      #print "1:$1 2:$2 3:$3 4:$4 5:$5 6:$6\n";
      $cty =~ s/ //g;
      $cty_deaths = 0 if not defined $cty_deaths or $cty_deaths eq "";
      $cty_recovered = 0 if not defined $cty_recovered or $cty_recovered eq "";
      $cty_serious = 0 if not defined $cty_serious or $cty_serious eq "";
      if ( lc $cty ~~ @interest ) {
	print "$cty: $cty_total confirmed cases and $cty_deaths deaths";
	print ", with $cty_recovered recovered." if $cty_recovered > 0;
	print("\n");
	$found = 1;
      }
    }
  }
  close(HTTP);
  print "not found\n" if $found == 0;
  exit 0;
}

my $date;
my ($incases, $indeaths, $inrecov) = (0, 0, 0);
my ($c, $d, $r) = (0,0,0);
open(HTTP, '-|', "elinks $params '$url'");
binmode(HTTP, ":utf8");
while (<HTTP>) {
  s/^\s*//;
  s/\[\d+\]//g;

  $date = "$1z" if /Last updated: (.*) GMT/;

  $incases = 1 if /Coronavirus Cases:/;
  $c = $1 if /^\s*([0-9,]+)\s*$/ and $incases == 1;
  $c =~ s/,//g if $incases == 1;
  $incases = 0 if $c != 0;

  $indeaths = 1 if /Deaths:/;
  $d = $1 if /^\s*([0-9,]+)\s*$/ and $indeaths == 1;
  $d =~ s/,//g if $indeaths == 1;
  $indeaths = 0 if $d != 0;

  $inrecov = 1 if /Recovered:/;
  $r = $1 if /^\s*([0-9,]+)\s*$/ and $inrecov == 1;
  $r =~ s/,//g if $inrecov == 1;
  $inrecov = 0 if $r != 0;
}
close(HTTP);

my $pct = sprintf("%0.1f", ($d/($d+$r)*100.0));
print "As of $date, there are ", commify($c), " confirmed cases and ",
  commify($d), " deaths, with ", commify($r),
  " recovered. Death rate $pct% of resolved cases.\n";
exit 0;
