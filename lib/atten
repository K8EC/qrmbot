#!/usr/bin/perl -w

# coax loss estimates

use strict;
use utf8;
use feature 'unicode_strings';
binmode(STDOUT, ":utf8");

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Util;
use Colors;

use Math::Round;

my %loss; # dB per 100 ft

my @lossMHz       = (   30,    50,   100,   146,   150,   220,   440,   450,   900,  1000,  1500,  2400);
#-------------------------------------------------------------------------------------------------------
# from universal-radio.com
$loss{"RG-174"}	  = [  5.5,   6.6,   8.8,  13.0, undef, undef,  25.0, undef, undef,  30.0, undef,  75.0];
$loss{"LMR-100A"} = [  3.9,   5.1, undef,   8.8,   8.9, undef,  15.6,  15.8, undef, undef, undef, undef];
$loss{"RG-59"}	  = [undef,   2.4,   3.5, undef, undef, undef,   7.6, undef, undef,  12.0, undef, undef];
$loss{"RG-8"}	  = [undef,   1.2,   1.8, undef, undef, undef, undef, undef, undef,   7.1, undef, undef];
$loss{"RG-213"}	  = [undef,   1.5,   2.1,   2.8,   2.8, undef,   5.1,   5.1, undef,   8.2, undef, undef];
$loss{"RG-214"}	  = [  1.2,   1.6,   1.9,   2.8,   2.8, undef,   5.1,   5.1, undef,   8.0, undef,  13.7];
$loss{"DRF-400"}  = [  0.7,   0.9, undef,   1.5, undef, undef, undef,   2.7, undef, undef, undef,   6.7];
$loss{"Bury-FLEX"}= [undef,   1.1,   1.5, undef, undef, undef, undef, undef, undef,   4.8, undef, undef];
$loss{"9086"}	  = [undef, undef,   1.4, undef, undef, undef,   2.8,   2.8, undef, undef, undef, undef];

# from w4rp.com
$loss{"LMR-1200"} = [ 0.21,  0.27, undef, undef,  0.48,  0.59, undef,  0.86,  1.27, undef,  1.69, undef];
$loss{"LMR-900"}  = [ 0.29,  0.37, undef, undef,  0.66,  0.80, undef,  1.17,  1.70, undef,  2.24, undef];
$loss{"LMR-600"}  = [ 0.42,  0.55, undef, undef,  0.96,  1.18, undef,  1.72,  2.50, undef,  3.31, undef];
$loss{"Superflex"}= [ 0.56,  0.73, undef, undef,  1.29,  1.58, undef,  2.32,  3.41, undef,  4.57, undef]; # half inch
$loss{"9914"}     = [  0.8,   1.1, undef, undef,   1.7,   2.1, undef,   3.1,   4.5, undef, undef, undef];
$loss{"LMR-195"}  = [  1.8,   2.3, undef, undef,   4.0,   4.8, undef,   7.0,   9.9, undef,  12.9, undef];

# considated between w4rp.com and universal-radio.com
$loss{"LMR-200"}  = [  1.8,   2.3, undef,   3.0,   4.0,   4.8,   6.0,   7.0,   9.9, undef,  12.7,  16.5];
$loss{"LMR-240"}  = [  1.3,   1.7, undef,   3.0,   3.0,   3.7,   5.2,   5.3,   7.6, undef,   9.9,  12.7];
$loss{"LMR-400"}  = [  0.7,   0.9, undef,   1.5,   1.5,   1.8,   2.7,   2.7,   3.9, undef,   5.1,   6.6];
$loss{"RG-8X"}    = [  2.0,   2.5,   3.0,   4.5,   4.7,   6.0,   8.1,   8.6,  12.8, undef, undef,  21.6];
$loss{"RG-58/U"}  = [  2.5,   4.1,   5.3,   6.1,   6.2,   7.4,  10.4,  10.6,  16.5,  24.0, undef,  38.9];
$loss{"9913"}     = [  0.8,   1.1, undef,   1.5,   1.7,   2.1,   2.8,   3.1,   4.4, undef,   6.0,   7.5];

# disable "experimental" warning on smart match operator use
no if $] >= 5.018, warnings => "experimental::smartmatch";

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);

# change this to 0 to always exit with success
our $exitnonzeroonerror = 1;
$exitnonzeroonerror = 0 if $username eq 'eggdrop';



my ($coax, $freq, $freq_units, $len, $len_units);

# eggdrop doesn't split args on spaces
@ARGV=split(' ', join(' ',@ARGV));

my $i = 0;
while ($i <= $#ARGV) {
  #print "$i: $ARGV[$i]\n";
  if (not defined $coax) {
    $coax = $ARGV[$i];
    $i++;
    next;
  }
  if (defined $coax and not defined $freq) {
    $freq = $ARGV[$i];
    $freq_units = $ARGV[$i+1];
    $i += 2;
    next;
  }
  if (defined $freq and not defined $len) {
    $len = $ARGV[$i];
    $len_units = $ARGV[$i+1];
    $i += 2;
    next;
  }
  print "warning: ignoring extraneous parameters\n";
}

if (not defined $coax) {
  print "syntax : atten <coax type> <freq> <freq units> <length> <length units>\n";
  print "example: atten LMR-400 446.0 MHz 12.5 m\n";
  exit $exitnonzeroonerror;
}

if (not isNumeric($freq)) {
  print "error: frequency must be numeric\n";
  exit $exitnonzeroonerror;
}
if (not isNumeric($len)) {
  print "error: length must be numeric\n";
  exit $exitnonzeroonerror;
}

if ($freq_units eq "GHz") {
  $freq = $freq * 1000;
  $freq_units = "MHz";
}
if ($freq_units eq "kHz") {
  $freq = $freq / 1000.0;
  $freq_units = "MHz";
}
if ($freq_units ne "MHz") {
  print "unsupported frequency units: $freq_units\n";
  exit $exitnonzeroonerror;
}

my @types = keys %loss;
my $uc_coax = uc $coax;
if (not $coax ~~ @types and not $uc_coax ~~ @types) {
  print "Unable to find coax type \"$coax\". Valid types: ", join(", ", sort keys %loss), "\n";
  exit $exitnonzeroonerror;
}

if (not defined $loss{$coax}) {
  $coax = uc $coax;
}

$i = 0;
while ($i <= $#lossMHz) {
  if (defined $loss{$coax}[$i]) {
    if ($freq < $lossMHz[$i]) {
      print "Error: lowest supported frequency for $coax is $lossMHz[$i] MHz.\n";
      exit $exitnonzeroonerror;
    }
    last;
  }
  $i++;
}

$i = $#lossMHz;
while ($i >= 0) {
  if (defined $loss{$coax}[$i]) {
    if ($lossMHz[$i] < $freq) {
      print "Error: highest supported frequency for $coax is $lossMHz[$i] MHz.\n";
      exit $exitnonzeroonerror;
    }
    last;
  }
  $i--;
}

if ($len < 0.0) {
  print "Invalid length.\n";
  exit $exitnonzeroonerror;
}

$i = 0;
my ($l, $h);
while ($i <= $#lossMHz) {
  if ($lossMHz[$i] <= $freq and $lossMHz[$i+1] >= $freq) {
    $l = $i;
    $h = $i+1;
    last;
  }
  $i++;
}

while (not defined $loss{$coax}[$l] and $l >= 0) {
  $l--;
}
while (not defined $loss{$coax}[$h] and $h <= $#lossMHz) {
  $h++;
}

#print "$lossMHz[$l] ≤ $freq ≤ $lossMHz[$h]\n";
#print "$loss{$coax}[$l] ≤ $freq ≤ $loss{$coax}[$h]\n";

# linear interpolation
my $freq_fraction = ($freq - $lossMHz[$l]) / ($lossMHz[$h] - $lossMHz[$l]);
my $atten = (($loss{$coax}[$h] - $loss{$coax}[$l]) * $freq_fraction) + $loss{$coax}[$l];

open (UNITS, '-|', "units --compact '$len $len_units / 100 ft'");
my $len_fraction = <UNITS>;
close(UNITS);
if (not isNumeric($len_fraction)) {
  print "$len_fraction";
  exit $exitnonzeroonerror;
}

my $atten_at_len = nearest(0.01, $len_fraction * $atten);
my $atten_m = nearest (0.01, $atten * 3.2808399);
$atten = nearest(0.01, $atten);

print "$coax attenuation estimated at $freq $freq_units: $atten dB/100 ft ($atten_m dB/100 m); loss \@length $len $len_units: ", bold("$atten_at_len dB"), "\n";
