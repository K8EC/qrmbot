#!/usr/bin/perl -w

# 2-clause BSD license.
# Copyright 2021 /u/molo1134. All rights reserved.

use strict;
use warnings;
use utf8;
use feature 'unicode_strings';
binmode(STDOUT, ":utf8");

use JSON qw( decode_json );
use Math::Round;
use POSIX qw(strftime);

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;
use Util;

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);

@ARGV=split(' ', join(' ',@ARGV));

our $apikey = undef;

# change this to 0 to always exit with success
our $exitnonzeroonerror = 1;
$exitnonzeroonerror = 0 if $username eq 'eggdrop';

my $quote;
if ($#ARGV < 0 || length($ARGV[0]) == 0) {
  $quote = "DJI";
} else {
  $quote = $ARGV[0];
}


my $url = "https://query1.finance.yahoo.com/v7/finance/quote?lang=en-US&region=US&corsDomain=finance.yahoo.com&symbols=$quote";

open(HTTP, '-|', "curl -4 --max-time 10 -s -k -L '$url'");
binmode(HTTP, ":utf8");
local $/;   # read entire file -- FIXME: potentially memory hungry
my $json = <HTTP>;
close(HTTP);
#print "$json\n"; #debug XXX

if (not $json =~ /^\s*{/) {
  print "error1 while retrieving data: $json\n";
  exit $exitnonzeroonerror;
}
my $j = decode_json($json);

if (not defined($j->{quoteResponse}) or defined($j->{quoteResponse}->{error})) {
  print "error while retrieving data:";
  print $j->{quoteResponse}->{error};
  print "\n";
  exit $exitnonzeroonerror;
}

my $r = $j->{quoteResponse}->{result}[0];

my ($ticker, $open, $price, $vol, $chg, $pct);

$ticker = $r->{symbol};
$open = $r->{regularMarketOpen};
$price = $r->{regularMarketPrice};
$vol = $r->{regularMarketVolume};
$chg = $r->{regularMarketChange};
$pct = $r->{regularMarketChangePercent};

my $trend = 1;
$trend = 0 if defined($pct) and $pct < 0;

my $trendsymbol;
$trendsymbol = green("↑") if $trend > 0;
$trendsymbol = red("↓") if $trend <= 0;

$price = commify($price);
$open = commify($open);
$chg = commify($chg);
$vol = commify($vol);
$pct = nearest(0.1, $pct);

print bold($ticker), " ", "$trendsymbol$price ";

print "+$chg (" if $trend;
print "$chg (" if not $trend;

print green("+$pct") if $trend;
print red($pct) if not $trend;

print "%) open: $open volume: $vol\n";

