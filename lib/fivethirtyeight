#!/usr/bin/perl -w

# lookup fivethrityeight.com election prediction data

# 2-clause BSD license.
# Copyright (c) 2020, 2021, 2022 molo1134@github. All rights reserved.

use strict;
use utf8;
use feature 'unicode_strings';
binmode(STDOUT, ":utf8");

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Util;
use Colors;

use JSON qw( decode_json );
use Math::Round;
use List::Util qw[min max];
use POSIX qw(strftime);

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);
# disable "experimental" warning on smart match operator use
no if $] >= 5.018, warnings => "experimental::smartmatch";

my $state = "US";
my $senate = 0;
my $house = 0;
my $generic = 0;
my $housepoll = 0;
my $governor = 0;
my $year = 2022;
my $i = 0;
while ($i <= $#ARGV) {
  if ($ARGV[$i] =~ /--senate/) {
    $senate = 1;
  } elsif ($ARGV[$i] =~ /--house$/) {
    $house = 1;
  } elsif ($ARGV[$i] =~ /--generic/) {
    $generic = 1;
  } elsif ($ARGV[$i] =~ /--housepoll/) {
    $housepoll = 1;
  } elsif ($ARGV[$i] =~ /--gov/) {
    $governor = 1;
  } elsif ($ARGV[$i] =~ /--20(\d\d)/) {
    $year = 2000 + $1;
  } elsif ($ARGV[$i] =~ /--year/) {
    $year = $ARGV[$i+1];
    $i++;
  } else {
    $state = uc $ARGV[$i];
  }
  $i++;
}

my %stateToName;
$stateToName{US} = "National";
$stateToName{AK} = "Alaska";
$stateToName{AL} = "Alabama";
$stateToName{AR} = "Arkansas";
$stateToName{AZ} = "Arizona";
$stateToName{CA} = "California";
$stateToName{CO} = "Colorado";
$stateToName{CT} = "Connecticut";
$stateToName{DC} = "District of Columbia";
$stateToName{DE} = "Delaware";
$stateToName{FL} = "Florida";
$stateToName{GA} = "Georgia";
$stateToName{HI} = "Hawaii";
$stateToName{IA} = "Iowa";
$stateToName{ID} = "Idaho";
$stateToName{IL} = "Illinois";
$stateToName{IN} = "Indiana";
$stateToName{KS} = "Kansas";
$stateToName{KY} = "Kentucky";
$stateToName{LA} = "Louisiana";
$stateToName{MA} = "Massachusetts";
$stateToName{MD} = "Maryland";
$stateToName{ME1} = "Maine 1st Dist.";
$stateToName{ME2} = "Maine 2nd Dist.";
$stateToName{ME} = "Maine";
$stateToName{MI} = "Michigan";
$stateToName{MN} = "Minnesota";
$stateToName{MO} = "Missouri";
$stateToName{MS} = "Mississippi";
$stateToName{MT} = "Montana";
$stateToName{NC} = "North Carolina";
$stateToName{ND} = "North Dakota";
$stateToName{NE1} = "Nebraska 1st Dist.";
$stateToName{NE2} = "Nebraska 2nd Dist.";
$stateToName{NE3} = "Nebraska 3rd Dist.";
$stateToName{NE} = "Nebraska";
$stateToName{NH} = "New Hampshire";
$stateToName{NJ} = "New Jersey";
$stateToName{NM} = "New Mexico";
$stateToName{NV} = "Nevada";
$stateToName{NY} = "New York";
$stateToName{OH} = "Ohio";
$stateToName{OK} = "Oklahoma";
$stateToName{OR} = "Oregon";
$stateToName{PA} = "Pennsylvania";
$stateToName{RI} = "Rhode Island";
$stateToName{SC} = "South Carolina";
$stateToName{SD} = "South Dakota";
$stateToName{TN} = "Tennessee";
$stateToName{TX} = "Texas";
$stateToName{UT} = "Utah";
$stateToName{VA} = "Virginia";
$stateToName{VT} = "Vermont";
$stateToName{WA} = "Washington";
$stateToName{WI} = "Wisconsin";
$stateToName{WV} = "West Virginia";
$stateToName{WY} = "Wyoming";

my %stateToUrlFrag;
$stateToUrlFrag{US} = "us";
$stateToUrlFrag{AK} = "alaska";
$stateToUrlFrag{AL} = "alabama";
$stateToUrlFrag{AR} = "arkansas";
$stateToUrlFrag{AZ} = "arizona";
$stateToUrlFrag{CA} = "california";
$stateToUrlFrag{CO} = "colorado";
$stateToUrlFrag{CT} = "connecticut";
$stateToUrlFrag{DC} = "district-of-columbia";
$stateToUrlFrag{DE} = "delaware";
$stateToUrlFrag{FL} = "florida";
$stateToUrlFrag{GA} = "georgia";
$stateToUrlFrag{HI} = "hawaii";
$stateToUrlFrag{IA} = "iowa";
$stateToUrlFrag{ID} = "idaho";
$stateToUrlFrag{IL} = "illinois";
$stateToUrlFrag{IN} = "indiana";
$stateToUrlFrag{KS} = "kansas";
$stateToUrlFrag{KY} = "kentucky";
$stateToUrlFrag{LA} = "louisiana";
$stateToUrlFrag{MA} = "massachusetts";
$stateToUrlFrag{MD} = "maryland";
$stateToUrlFrag{ME1} = "maine-1";
$stateToUrlFrag{ME2} = "maine-2";
$stateToUrlFrag{ME} = "maine";
$stateToUrlFrag{MI} = "michigan";
$stateToUrlFrag{MN} = "minnesota";
$stateToUrlFrag{MO} = "missouri";
$stateToUrlFrag{MS} = "mississippi";
$stateToUrlFrag{MT} = "montana";
$stateToUrlFrag{NC} = "north-carolina";
$stateToUrlFrag{ND} = "north-dakota";
$stateToUrlFrag{NE1} = "nebraska-1";
$stateToUrlFrag{NE2} = "nebraska-2";
$stateToUrlFrag{NE3} = "nebraska-3";
$stateToUrlFrag{NE} = "nebraska";
$stateToUrlFrag{NH} = "new-hampshire";
$stateToUrlFrag{NJ} = "new-jersey";
$stateToUrlFrag{NM} = "new-mexico";
$stateToUrlFrag{NV} = "nevada";
$stateToUrlFrag{NY} = "new-york";
$stateToUrlFrag{OH} = "ohio";
$stateToUrlFrag{OK} = "oklahoma";
$stateToUrlFrag{OR} = "oregon";
$stateToUrlFrag{PA} = "pennsylvania";
$stateToUrlFrag{RI} = "rhode-island";
$stateToUrlFrag{SC} = "south-carolina";
$stateToUrlFrag{SD} = "south-dakota";
$stateToUrlFrag{TN} = "tennessee";
$stateToUrlFrag{TX} = "texas";
$stateToUrlFrag{UT} = "utah";
$stateToUrlFrag{VA} = "virginia";
$stateToUrlFrag{VT} = "vermont";
$stateToUrlFrag{WA} = "washington";
$stateToUrlFrag{WI} = "wisconsin";
$stateToUrlFrag{WV} = "west-virginia";
$stateToUrlFrag{WY} = "wyoming";

my @atLargeStates = ("WY", "DE", "MT", "AK", "ND", "SD", "VT", "AS", "GU", "MI", "PR", "VI");

if ($senate == 0 and $house == 0 and $housepoll == 0 and $generic == 0 and $governor == 0) {

  my @keys = keys %stateToUrlFrag;
  if (not ($state ~~ @keys)) {
    print "not found: $state\n";
    exit 0;
  }

  while ($year % 4 != 0) {
    --$year;
  }

  my $url = "https://projects.fivethirtyeight.com/${year}-election-forecast/$stateToUrlFrag{$state}_timeseries.json";

  #print "$url\n";
  local $/;   # read entire file -- FIXME: potentially memory hungry
  open (JSON, '-|', "curl --max-time 10 -s -k -L '$url'");
  my $json = <JSON>;
  close(JSON);
  if ($json eq "" or $json =~ /<h1>(.*?)</) {
    print "error $1: $url\n";
    exit 0;
  }
  my $j = decode_json($json) or die "parse error: $json\n";

  my $didtop = 0;
  foreach my $pred (@{$j}) {
    if ($pred->{type} eq "polls-plus" or $pred->{type} eq "classic") {
      foreach my $cand (@{$pred->{candidates}}) {
	my $name = $cand->{candidate};
	my $date = @{$cand->{dates}}[0]->{date};
	my $winprob = @{$cand->{dates}}[0]->{winprob};
	my $ev = @{$cand->{dates}}[0]->{evs}->{mean};
	my $voteshare = @{$cand->{dates}}[0]->{voteshare}->{mean};

	my $evtext = " and " . bold(sprintf("%0.0f", $ev)) . " electoral votes" if defined $ev;
	$evtext = "" if not defined $ev;

	$name = red($name) if $name eq "Trump";
	$name = lightblue($name) if $name eq "Biden";

	print "FiveThirtyEight ${year} ", bold(italic($stateToName{$state})), " election prediction as of $date:\n" if $didtop++ == 0;
	printf("  ${name}'s odds %0.1f%% with mean %0.1f%% of popular vote%s\n", $winprob, $voteshare, $evtext) if $winprob < 50.0;
	printf("  ${name}'s odds %s with mean %s of popular vote%s\n", bold(sprintf("%0.1f%%", $winprob)), bold(sprintf("%0.1f%%", $voteshare)), $evtext) if $winprob >= 50.0;
      }
    }
  }
}

if ($senate == 1) {
  if ($state eq "US") {
    my $url = "https://projects.fivethirtyeight.com/${year}-election-forecast/senate_us_latest.json";

    local $/;   # read entire file -- FIXME: potentially memory hungry
    open (JSON, '-|', "curl --max-time 10 -s -k -L $url");
    my $json = <JSON>;
    close(JSON);
    my $j = decode_json($json) or die "parse error: $json\n";
    my $didtop = 0;

    foreach my $pred (@{$j}) {
      next if $pred->{type} ne "deluxe";
      foreach my $cand (@{$pred->{candidates}}) {
	my $name = $cand->{candidate};
	my $date = $cand->{date};
	my $winprob = $cand->{winprob};
	my $seats = $cand->{seats}->{mean};
	$name = red($name) if $name eq "Republicans";
	$name = lightblue($name) if $name eq "Democrats";
	print "FiveThirtyEight ${year} ", bold(italic("Senate")), " election prediction as of $date:\n" if $didtop++ == 0;
	printf("  ${name} control odds %0.1f%% with mean %0.1f seats\n", $winprob, $seats) if $winprob < 50.0;
	printf("  ${name} control odds %s with mean %s seats\n", bold(sprintf("%0.1f%%", $winprob)), bold(sprintf("%0.1f", $seats))) if $winprob >= 50.0;
      }
    }
  } else {
    my $url = "https://projects.fivethirtyeight.com/${year}-election-forecast/senate_race_summary.json";
    local $/;   # read entire file -- FIXME: potentially memory hungry
    open (JSON, '-|', "curl --max-time 10 -s -k -L $url");
    my $json = <JSON>;
    close(JSON);
    my $j = decode_json($json) or die "parse error: $json\n";
    my $found = 0;

    foreach my $pred (@{$j}) {
      next if $pred->{type} ne "deluxe";
      foreach my $race (@{$pred->{races}}) {
	my $didtop = 0;
	next if $state ne "ALL" and not $race->{race} =~ /^$state/;
	foreach my $cand (@{$race->{candidates}}) {
	  my $votesh = $cand->{voteshare}->{mean};
	  next if $votesh == 0;
	  my $name = $cand->{candidate};
	  my $incumb = $cand->{incumbent};
	  my $party = $cand->{party};
	  my $winprob = $cand->{winprob};
	  $name = "$name($party)" if defined $cand->{party};
	  $name = red($name) if defined $party and $party eq "R";
	  $name = lightblue($name) if defined $party and $party eq "D";
	  $name = green($name) if defined $party and $party eq "G";
	  $name = yellow($name) if defined $party and $party eq "L";
	  $name = "$name â„¹" if $incumb;
	  print "FiveThirtyEight ${year} ", bold(italic("Senate $race->{race}")), " election prediction:\n" if $didtop++ == 0;
	  printf("  ${name} odds %0.1f%% with mean %0.1f%% vote share\n", $winprob, $votesh) if $winprob < 50.0;
	  printf("  ${name} odds %s with mean %s vote share\n", bold(sprintf("%0.1f%%", $winprob)), bold(sprintf("%0.1f%%", $votesh))) if $winprob >= 50.0;
	  $found = 1;
	}
      }
    }
    print "not found\n" if $found == 0;
  }
}

if ($generic == 1) {
  # generic ballot
  my $url = "https://projects.fivethirtyeight.com/polls/generic-ballot/${year}/polling-average.json";
  local $/;   # read entire file -- FIXME: potentially memory hungry
  open (JSON, '-|', "curl --max-time 10 --fail -s -k -L $url");
  my $json = <JSON>;
  close(JSON);
  my $j = decode_json($json) or die "parse error: $json\n";
  my $last = @{$j}[scalar @{$j} - 1];
  my $pent = @{$j}[scalar @{$j} - 2];  #penulitmate

  my ($rep, $dem);
  $rep = $last if $last->{party} eq "rep";
  $dem = $last if $last->{party} eq "dem";
  $rep = $pent if $pent->{party} eq "rep";
  $dem = $pent if $pent->{party} eq "dem";

  my $dem_dev = min($dem->{hi} - $dem->{pct_estimate},
		    $dem->{pct_estimate} - $dem->{lo});
  my $rep_dev = min($rep->{hi} - $rep->{pct_estimate},
		    $rep->{pct_estimate} - $rep->{lo});

  my $dem_pct = nearest(0.1, $dem->{pct_estimate});
  my $rep_pct = nearest(0.1, $rep->{pct_estimate});
  $dem_dev = nearest(0.1, $dem_dev);
  $rep_dev = nearest(0.1, $rep_dev);

  print "FiveThirtyEight $year ", bold("Generic Ballot"), " polling estimate as of $last->{date}:  ",
      lightblue("Democrats"), ": $dem_pct% Â±$dem_dev;  ",
      red("Republicans"), ": $rep_pct% Â±$rep_dev\n";
}


if ($housepoll == 1) {
  if ($state =~ /^([A-Z]{2})-?(\d*)$/) {
    $state = $1;
    my $dist = $2;
    $dist = undef if defined $dist and $dist eq "";

    my @keys = keys %stateToUrlFrag;
    if (not ($state ~~ @keys)) {
      print "not found: $state\n";
      exit 0;
    }

    if (not defined $dist and not $state ~~ @atLargeStates) {
      print "error: must provide district\n";
      exit 0;
    }

    my $url = "https://projects.fivethirtyeight.com/polls/house/$stateToUrlFrag{$state}/polls.json";
    $url = "https://projects.fivethirtyeight.com/polls/house/$stateToUrlFrag{$state}/$dist/polls.json" if defined $dist;

    local $/;   # read entire file -- FIXME: potentially memory hungry
    open (JSON, '-|', "curl --max-time 10 --fail -s -k -L $url");
    my $json = <JSON>;
    close(JSON);
    if (not defined($json) or $json eq "") {
      print "not found\n";
      exit 0;
    }
    my $j = decode_json($json) or die "parse error: $json\n";

    $i = 0;
    my $currcycle = strftime("%Y", gmtime(time()));
    my $found = 0;
    foreach my $poll (@{$j}) {
      next if $username eq getEggdropUID() and ++$i < scalar @{$j}; # only show latest
      next if $poll->{cycle} ne $currcycle and $poll->{cycle} ne $year;

      $found = 1;
      my $grade = $poll->{grade};
      $grade = undef if $grade eq "";
      my $pollUrl = shortenUrl($poll->{url});
      $pollUrl = $poll->{url} if not defined $pollUrl;
      my $warning = "";
      $warning = yellow(" [outdated]") if $poll->{cycle} ne strftime("%Y", gmtime(time()));
      print "Poll for ", italic(bold("$poll->{state} $poll->{seat_name}")), " by \"$poll->{pollster}\"";
      print " rated $grade" if defined $grade;
      print ", surveying $poll->{sampleSize}$poll->{population} $poll->{startDate} to $poll->{endDate} (details: $pollUrl )$warning:\n";
      foreach my $a (@{$poll->{answers}}) {
	my $party = substr $a->{party}, 0, 1;
	my $name = "$a->{choice}($party)";
	$name = red($name) if defined $party and $party eq "R";
	$name = lightblue($name) if defined $party and $party eq "D";
	$name = green($name) if defined $party and $party eq "G";
	$name = yellow($name) if defined $party and $party eq "L";
	printf "  %s: %s\n", $name, bold("$a->{pct}\%") if $a->{pct} >= 50.0;
	print "  $name: $a->{pct}\%\n" if $a->{pct} < 50.0;
      }
    }
    if (not $found) {
      print "no polls found for $currcycle\n";
    }

  } else {
    print "error: misformated race\n";
    exit 0;
  }
}

if ($house == 1) {
  if ($state eq "US") {
    my $url = "https://projects.fivethirtyeight.com/${year}-election-forecast/house_us_latest.json";
    local $/;   # read entire file -- FIXME: potentially memory hungry
    open (JSON, '-|', "curl --max-time 10 --fail -s -k -L $url");
    my $json = <JSON>;
    close(JSON);
    my $j = decode_json($json) or die "parse error: $json\n";
    for my $pred (@{$j}) {
      next if $pred->{type} ne "deluxe";
      print "FiveThirtyEight $year ", bold(italic("House Control")), " election prediction:\n";
      for my $c (@{$pred->{candidates}}) {
	my $name = $c->{candidate};
	$name = lightblue($name) if $name =~ /^Dem/;
	$name = red($name) if $name =~ /^Rep/;
	printf "  $name control odds %0.1f%% with mean %0.1f seats\n", $c->{winprob}, $c->{seats}->{mean} if $c->{winprob} < 50.0;
	printf "  $name control odds %s with mean %s seats\n", bold(sprintf("%0.1f%%", $c->{winprob})), bold(sprintf("%0.1f", $c->{seats}->{mean})) if $c->{winprob} >= 50.0;
      }
    }
  } elsif ($state =~ /^([A-Z]{2})-?(\d*)$/) {
    $state = $1;
    my $dist = $2;
    $dist = undef if defined $dist and $dist eq "";

    my @keys = keys %stateToUrlFrag;
    if (not ($state ~~ @keys)) {
      print "not found: $state\n";
      exit 0;
    }

    if (not defined $dist and not $state ~~ @atLargeStates and $username eq getEggdropUID()) {
      print "error: must provide district\n";
      exit 0;
    }

    my $found = 0;

    my $url = "https://projects.fivethirtyeight.com/${year}-election-forecast/house_race_summary.json";

    local $/;   # read entire file -- FIXME: potentially memory hungry
    open (JSON, '-|', "curl --max-time 10 --fail -s -k -L $url");
    my $json = <JSON>;
    close(JSON);
    if (not defined($json) or $json eq "") {
      print "not found\n";
      exit 0;
    }
    my $j = decode_json($json) or die "parse error: $json\n";

    foreach my $pred (@{$j}) {
      next if $pred->{type} ne "deluxe";
      foreach my $r (@{$pred->{races}}) {
	if ((defined $dist and $r->{race} eq "$state-$dist") or
	    (not defined $dist and substr($r->{race}, 0, 2) eq $state)) {
	  print "FiveThirtyEight $year ", italic(bold("House $r->{race}")), " election prediction:\n";
	  foreach my $cand (@{$r->{candidates}}) {
	    my $votesh = $cand->{voteshare}->{mean};
	    next if $votesh == 0;
	    my $name = $cand->{candidate};
	    my $incumb = $cand->{incumbent};
	    my $party = $cand->{party};
	    my $winprob = $cand->{winprob};
	    $name = "$name($party)" if defined $cand->{party};
	    $name = red($name) if defined $party and $party eq "R";
	    $name = lightblue($name) if defined $party and $party eq "D";
	    $name = green($name) if defined $party and $party eq "G";
	    $name = yellow($name) if defined $party and $party eq "L";
	    $name = "$name â„¹" if $incumb;
	    printf("  ${name} odds %0.1f%% with mean %0.1f%% vote share\n", $winprob, $votesh) if $winprob < 50.0;
	    printf("  ${name} odds %s with mean %s vote share\n", bold(sprintf("%0.1f%%", $winprob)), bold(sprintf("%0.1f%%", $votesh))) if $winprob >= 50.0;
	    $found = 1;
	  }
	}
      }
    }
    print "not found\n" if $found == 0;
  } else {
    print "malformed district\n";
    exit 0;
  }
}

if ($governor == 1) {
  my $url = "https://projects.fivethirtyeight.com/${year}-election-forecast/governor_race_summary.json";
  local $/;   # read entire file -- FIXME: potentially memory hungry
  open (JSON, '-|', "curl --max-time 10 -s -k -L $url");
  my $json = <JSON>;
  close(JSON);
  if ($json eq "" or $json =~ /<h1>(.*?)</) {
    print "error $1: $url\n";
    exit 0;
  }
  my $j = decode_json($json) or die "parse error: $json\n";

  if ($state eq "US") {
    my $didtop = 0;
    my %partyWinCount;

    foreach my $pred (@{$j}) {
      next if $pred->{type} ne "deluxe";
      my $numraces = scalar @{$pred->{races}};
      foreach my $race (@{$pred->{races}}) {
	foreach my $cand (@{$race->{candidates}}) {
	  if ($cand->{winprob} > 50.0) {
	    $partyWinCount{$cand->{party}}++;
	  }
	}
      }
    }

    $url = "https://projects.fivethirtyeight.com/${year}-election-forecast/governor_incumbents.json";
    local $/;   # read entire file -- FIXME: potentially memory hungry
    open (JSON, '-|', "curl --max-time 10 -s -k -L $url");
    my $json = <JSON>;
    close(JSON);
    if ($json eq "" or $json =~ /<h1>(.*?)</) {
      print "error $1: $url\n";
      exit 0;
    }
    my $i = decode_json($json) or die "parse error: $json\n";
    my %partyIncumbUpCount;
    my %partyIncumbTotalCount;

    foreach my $r (@{$i}) {
      $partyIncumbUpCount{$r->{party}}++ if $r->{up};
      $partyIncumbTotalCount{$r->{party}}++;
    }
    my %pred;
    $pred{D} = ($partyIncumbTotalCount{D} - $partyIncumbUpCount{D}) + $partyWinCount{D};
    $pred{R} = ($partyIncumbTotalCount{R} - $partyIncumbUpCount{R}) + $partyWinCount{R};

    print "FiveThirtyEight ${year} ", bold(italic("Governor")), " election prediction:\n";
#    print "curr: ", lightblue("D: $partyIncumbTotalCount{D}"),
#	  " | ", red("R: $partyIncumbTotalCount{R}"), "\n";
    print "Predicted governorships by party: ", lightblue("D: $pred{D}"), " | ", red("R: $pred{R}"), " | ";
	
    print lightblue("[D +" . ($pred{D} - $partyIncumbTotalCount{D}) . "]") if $pred{D} > $partyIncumbTotalCount{D};
    print red("[R +" . ($pred{R} - $partyIncumbTotalCount{R}) . "]") if $pred{R} > $partyIncumbTotalCount{R};
    print "\n";

  } else {
    my $found = 0;

    foreach my $pred (@{$j}) {
      next if $pred->{type} ne "deluxe";
      foreach my $race (@{$pred->{races}}) {
	next if $state ne $race->{race};
	$found = 1;

	print "FiveThirtyEight ${year} ", bold(italic("Governor $race->{race}")), " election prediction:\n";

	foreach my $cand (@{$race->{candidates}}) {
	  my $winprob = $cand->{winprob};
	  my $votesh = $cand->{voteshare}->{mean};
	  next if $votesh == 0;
	  my $name = $cand->{candidate};
	  my $incumb = $cand->{incumbent};
	  my $party = $cand->{party};
	  $name = "$name($party)" if defined $cand->{party};
	  $name = red($name) if defined $party and $party eq "R";
	  $name = lightblue($name) if defined $party and $party eq "D";
	  $name = green($name) if defined $party and $party eq "G";
	  $name = yellow($name) if defined $party and $party eq "L";
	  $name = "$name â„¹" if $incumb;
	  printf("  ${name} odds %0.1f%% with mean %0.1f%% vote share\n", $winprob, $votesh) if $winprob < 50.0;
	  printf("  ${name} odds %s with mean %s vote share\n", bold(sprintf("%0.1f%%", $winprob)), bold(sprintf("%0.1f%%", $votesh))) if $winprob >= 50.0;
	}
      }

    }
    print "not found\n" if $found == 0;
  }
}
