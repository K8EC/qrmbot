#!/usr/bin/perl -w

# aeris weather
#
# 2-clause BSD license.
# Copyright (c) 2021 molo1134@github. All rights reserved.
#
# requires an API key from aerisweather.com  Place into the file $HOME/.aerisweather as follows:
#
# $client_id = "0123456789abcdef";
# $client_secret = "0123456789abcdef";

use strict;
use utf8;
use feature 'unicode_strings';
binmode(STDOUT, ":utf8");

use Encode qw(decode);
use I18N::Langinfo qw(langinfo CODESET);
use JSON qw( decode_json );
use Math::Round;
use URI::Escape;
use POSIX qw(strftime);

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;
use Location;

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);

our $client_id = undef;
our $client_secret = undef;

# change this to 0 to always exit with success
our $exitnonzeroonerror = 1;
$exitnonzeroonerror = 0 if $username eq 'eggdrop';

my $apikeyfile = $ENV{'HOME'} . "/.aerisweather";
if (-e ($apikeyfile)) {
  require($apikeyfile);
} else {
  die "error: unable to read file $apikeyfile"
}
die "error: no API key set" unless defined($client_id) and defined($client_secret);

my $full = 0;
$full = 1 if $username ne 'eggdrop';

my $i = 0;
my $loc;
while ($i <= $#ARGV) {
  if ($ARGV[$i] =~ /--full/) {
    $full = 1;
    $i++;
    next;
  }
  if ($ARGV[$i] =~ /--short/) {
    $full = 0;
    $i++;
    next;
  }
  if (defined($loc)) {
    $loc = $loc . " " . $ARGV[$i];
  } else {
    $loc = $ARGV[$i];
  }
  $i++;
}

# decode command line from locale-specified codeset
my $codeset = langinfo(CODESET);
$loc = decode($codeset, $loc);

if (defined($loc)) {
  $loc =~ s/^\s*//;
  $loc =~ s/\s*$//;
}

if (!defined($loc) or length($loc) == 0) {
  if ($username eq 'eggdrop') {
    print "usage: !wx <location>\n";
  } else {
    print "usage: $0 <location>\n";
  }
  exit $exitnonzeroonerror;
}

my $geo = argToCoords($loc);
$loc = $geo if defined $geo;
my $encodedloc = uri_escape($loc);

our %iconToEmojiMap = (
  "blizzard.png" => "üå¨Ô∏èüå®Ô∏è",
  "blizzardn.png" => "üå¨Ô∏èüå®Ô∏è",
  "blowingsnow.png" => undef,
  "blowingsnown.png" => undef,
  "clear.png" => "‚òÄÔ∏è",
  "clearn.png" => "üåô",
  "cloudy.png" => "‚òÅÔ∏è",
  "cloudyn.png" => "‚òÅÔ∏è",
  "cloudyw.png" => "üå¨Ô∏è‚òÅÔ∏è",
  "cloudywn.png" => "üå¨Ô∏è‚òÅÔ∏è",
  "cold.png" => "ü•∂",
  "coldn.png" => "ü•∂",
  "drizzle.png" => "üåßÔ∏è",
  "drizzlen.png" => "üåßÔ∏è",
  "dust.png" => undef,
  "dustn.png" => undef,
  "fair.png" => "üå§Ô∏è",
  "fairn.png" => undef,
  "drizzlef.png" => undef,
  "fdrizzlen.png" => undef,
  "flurries.png" => "üå®Ô∏è",
  "flurriesn.png" => "üå®Ô∏è",
  "flurriesw.png" => "üå¨Ô∏èüå®Ô∏è",
  "flurrieswn.png" => "üå¨Ô∏èüå®Ô∏è",
  "fog.png" => "üå´Ô∏è",
  "fogn.png" => "üå´Ô∏è",
  "freezingrain.png" => "‚ùÑÔ∏è üåßÔ∏è",
  "freezingrainn.png" => "‚ùÑÔ∏è üåßÔ∏è",
  "hazy.png" => undef,
  "hazyn.png" => undef,
  "hot.png" => "üå°Ô∏è",
  "mcloudy.png" => "üå•Ô∏è",
  "mcloudyn.png" => undef,
  "mcloudyr.png" => "üå•Ô∏èüåßÔ∏è",
  "mcloudyrn.png" => undef,
  "mcloudyrw.png" => undef,
  "mcloudyrwn.png" => undef,
  "mcloudys.png" => "üå•Ô∏èüå®Ô∏è",
  "mcloudysn.png" => undef,
  "mcloudysf.png" => undef,
  "mcloudysfn.png" => undef,
  "mcloudysfw.png" => undef,
  "mcloudysfwn.png" => undef,
  "mcloudysw.png" => "üå¨Ô∏èüå•Ô∏èüå®Ô∏è",
  "mcloudyswn.png" => undef,
  "mcloudyt.png" => "üå•Ô∏èüå©Ô∏è",
  "mcloudytn.png" => undef,
  "mcloudytw.png" => "üå¨Ô∏èüå•Ô∏èüå©Ô∏è",
  "mcloudytwn.png" => undef,
  "mcloudyw.png" => "üå¨Ô∏èüå•Ô∏è",
  "mcloudywn.png" => undef,
  "pcloudy.png" => "‚õÖ",
  "pcloudyn.png" => undef,
  "pcloudyr.png" => "‚õÖüåßÔ∏è",
  "pcloudyrn.png" => undef,
  "pcloudyrw.png" => undef,
  "pcloudyrwn.png" => undef,
  "pcloudys.png" => "‚õÖüå®Ô∏è",
  "pcloudysn.png" => undef,
  "pcloudysf.png" => undef,
  "pcloudysfn.png" => undef,
  "pcloudysfw.png" => undef,
  "pcloudysfwn.png" => undef,
  "pcloudysw.png" => "üå¨Ô∏è‚õÖüå®Ô∏è",
  "pcloudyswn.png" => undef,
  "pcloudyt.png" => "‚õÖüå©Ô∏è",
  "pcloudytn.png" => undef,
  "pcloudytw.png" => "üå¨Ô∏è‚õÖüå©Ô∏è",
  "pcloudytwn.png" => undef,
  "pcloudyw.png" => "üå¨Ô∏è‚õÖ",
  "pcloudywn.png" => undef,
  "rain.png" => "üåßÔ∏è",
  "rainn.png" => "üåßÔ∏è",
  "rainandsnow.png" => "üåßÔ∏èüå®Ô∏è",
  "rainandsnown.png" => "üåßÔ∏èüå®Ô∏è",
  "raintosnow.png" => "üåßÔ∏èüå®Ô∏è",
  "raintosnown.png" => "üåßÔ∏èüå®Ô∏è",
  "rainw.png" => "üå¨Ô∏èüåßÔ∏è",
  "rainwn.png" => "üå¨Ô∏èüåßÔ∏è",
  "showers.png" => "üåßÔ∏è",
  "showersn.png" => "üåßÔ∏è",
  "showersw.png" => "üå¨Ô∏èüåßÔ∏è",
  "showerswn.png" => "üå¨Ô∏èüåßÔ∏è",
  "sleet.png" => undef,
  "sleetn.png" => undef,
  "sleetsnow.png" => undef,
  "sleetsnown.png" => undef,
  "smoke.png" => undef,
  "smoken.png" => undef,
  "snow.png" => "üå®Ô∏è",
  "snown.png" => "üå®Ô∏è",
  "snoww.png" => "üå¨Ô∏èüå®Ô∏è",
  "snowwn.png" => "üå¨Ô∏èüå®Ô∏è",
  "snowshowers.png" => "üå®Ô∏è",
  "snowshowersn.png" => "üå®Ô∏è",
  "snowshowersw.png" => "üå¨Ô∏èüå®Ô∏è",
  "snowshowerswn.png" => "üå¨Ô∏èüå®Ô∏è",
  "snowtorain.png" => "üå®Ô∏èüåßÔ∏è",
  "snowtorainn.png" => "üå®Ô∏èüåßÔ∏è",
  "sunny.png" => "‚òÄÔ∏è",
  "sunnyn.png" => "üåô",
  "sunnyw.png" => "üå¨Ô∏è‚òÄÔ∏è",
  "sunnywn.png" => "üå¨Ô∏èüåô",
  "tstorm.png" => "‚õàÔ∏è",
  "tstormn.png" => "‚õàÔ∏è",
  "tstorms.png" => "‚õàÔ∏è",
  "tstormsn.png" => "‚õàÔ∏è",
  "tstormsw.png" => "üå¨Ô∏è‚õàÔ∏è",
  "tstormswn.png" => "üå¨Ô∏è‚õàÔ∏è",
  "wind.png" => "üå¨Ô∏è",
  "windn.png" => "üå¨Ô∏è",
  "wintrymix.png" => "üå®Ô∏èüåßÔ∏è",
  "wintrymixn.png" => "üå®Ô∏èüåßÔ∏è",
);

#my $url = "https://api.aerisapi.com/observations/$encodedloc?filter=allstations&client_id=$client_id&client_secret=$client_secret";
my $url = "https://api.aerisapi.com/observations/closest?p=$encodedloc&filter=allstations&client_id=$client_id&client_secret=$client_secret&limit=1";
#print "$url\n";
open (HTTP, '-|', "curl --max-time 10 -s -k -L '$url'");
local $/;   # read entire file -- FIXME: potentially memory hungry
my $json = <HTTP>;
close(HTTP);
#print "$json\n";
if (not $json =~ /^\s*{/) {
  print "error1 while retrieving data: $json\n";
  exit $exitnonzeroonerror;
}
my $j = decode_json($json);

if (not $j->{success} or defined $j->{error}) {
  print "error2 while retrieving data: $j->{error}->{code}: $j->{error}->{description}\n";
  exit $exitnonzeroonerror;
}

my $resp = $j->{response}[0];

# place name
my $name = $resp->{place}->{name};
if (defined $resp->{place}->{city} and $name ne $resp->{place}->{city}) {
  $name .= ", " . $resp->{place}->{city}
}
if (defined $resp->{place}->{state} and $name ne $resp->{place}->{state} and $resp->{place}->{state} ne "") {
  $name .= ", " . uc $resp->{place}->{state}
}
if (defined $resp->{place}->{country} and $name ne $resp->{place}->{country}) {
  $name .= ", " . uc $resp->{place}->{country}
}

# geo coords
my $lat = nearest(.01, $resp->{loc}->{lat});
my $lon = nearest(.01, $resp->{loc}->{long});
my $elev_ft = $resp->{profile}->{elevFT};
my $elev_m = nearest(0.1, $resp->{profile}->{elevM});

my $ob = $resp->{ob};

# OUTPUT
print "Weather for ", bold($name);

#full
if ($full == 1) {
  print " ($lat,$lon) ";
  print " Elev: ${elev_m}m/${elev_ft}ft\n" if defined($elev_ft);
  print " obs. at $resp->{id} ($resp->{dataSource}";
  print "; $ob->{trustFactor}% trust" if $ob->{trustFactor} < 100;

  $ENV{TZ} = $resp->{profile}->{tz};
  my $now = time();
  my $delta = $now - $ob->{timestamp};
  #print "), $ob->{dateTimeISO}\n";
  print "), ", strftime("%H:%M %Z", localtime($ob->{timestamp}));
  print " (" if $delta > 900;
  printf "%dh ", int($delta / 3600) if $delta > 3600;
  printf "%dm ago)", int(($delta % 3600) / 60) if $delta > 900; # 15 minutes;
  print "\n";
}

my $emoji = " " . getEmojiFromIcon($ob->{icon});

#short
print " conditions: ", bold($ob->{weather});
print $emoji if length $emoji > 1;
print "  Temp: ", bold("$ob->{tempC}¬∞C/$ob->{tempF}¬∞F");
print "  Humidity: $ob->{humidity}%" if defined $ob->{humidity};
print " " if ($full == 0);

# feelslike for full, or if sufficiently different for short
if ($full == 1 or (abs($ob->{tempC} - $ob->{feelslikeC}) >= 3.0)) {
  print "\n" if $full == 1;
  print " Feels like: $ob->{feelslikeC}¬∞C/$ob->{feelslikeF}¬∞F ";
}

#full
if ($full == 1 and defined $ob->{visibilityKM}) {
  print " Visibility: ", round($ob->{visibilityKM}), "km/", round($ob->{visibilityMI}), "mi";
  print " cloud ceiling: $ob->{ceilingFT}ft/$ob->{ceilingM}m" if defined $ob->{ceilingFT};
  print "\n";
}

#short
if (not defined($ob->{windSpeedMPH})) {
  print " Wind: no data ";
} else {
  my $wind;
  if ($ob->{windSpeedMPH} == 0) {
    $wind = "calm";
  } else {
    $wind = "at $ob->{windSpeedKPH}kmph/$ob->{windSpeedMPH}mph";
  }
  print " Wind: $ob->{windDir} $wind ";
  print "(gust $ob->{windGustKPH}kph/$ob->{windGustMPH}mph) " if defined $ob->{windGustKPH} and $ob->{windGustKPH} > 0.0;
}

#full
#print " Pressure: $ob->{pressureMB}mb/$ob->{pressureIN}inHg ($pressure_trend)" if $full == 1;
print " Pressure: $ob->{pressureMB}mb/$ob->{pressureIN}inHg" if $full == 1 and defined $ob->{pressureMB};

if ($full == 1 and defined $ob->{precipMM} and $ob->{precipMM} > 0.0) {
  print "\n Precipitation: $ob->{precipMM}mm/$ob->{precipIN}in";
}

#end
print "\n";

#---------- alerts

$url = "https://api.aerisapi.com/alerts/$encodedloc?client_id=$client_id&client_secret=$client_secret";
#print "$url\n";
open (HTTP, '-|', "curl --max-time 10 -s -k -L '$url'");
local $/;   # read entire file -- FIXME: potentially memory hungry
$json = <HTTP>;
close(HTTP);
#print "$json\n";

if (not $json =~ /^\s*{/) {
  print "error1 while retrieving data: $json\n";
  exit $exitnonzeroonerror;
}
$j = decode_json($json);

if (not $j->{success} or (defined $j->{error} and $j->{error}->{code} ne "warn_no_data")) {
  print "error2 while retrieving data: $j->{error}\n";
  exit $exitnonzeroonerror;
}

if (defined $j->{response}) {
  foreach my $alert (@{$j->{response}}) {
    my $body = $alert->{details}->{body};
    $body =~ s/\n/ /g;
    $body =~ s/\* WH(AT|ERE|EN)//g;
    $body =~ s/\* IMPACTS//g;
    $body =~ s/\.\.\.\s*\.\.\./.../g;
    $body =~ s/  / /g;
    $body =~ s/\.\.\./‚Ä¶/g;
    $body = substr($body, 0, 200) if $full == 0;
    $body .= "‚Ä¶" if $full == 0;
    
    my $name = $alert->{details}->{name};
    $name = red($name) if $alert->{details}->{emergency};
    $name = yellow($name) if not $alert->{details}->{emergency};
    printf " %s: %s\n\n", $name, $body;
  }
}

sub getEmojiFromIcon {
  my $icon = shift;
  our %iconToEmojiMap;
  #print "$icon\n";
  if (defined $iconToEmojiMap{$icon}) {
    return $iconToEmojiMap{$icon};
  } else {
    $icon =~ s/\.png$//;
    #return "[$icon]";
    return "";
  }
}
