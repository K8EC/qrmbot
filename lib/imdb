#!/usr/bin/perl -w
#
# Pull movie data from OMDB
#
# 2-clause BSD license.
# Copyright (c) 2022 KN6RAP. All rights reserved.
# Copyright (c) 2022 molo1134@github. All rights reserved.
#
# requires an API key from www.omdbapi.com  Place into the file $HOME/.omdbapi
# as follows:
#
# $apikey = "0123456789abcdef";

use strict;
use utf8;
use feature 'unicode_strings';
binmode(STDOUT, ":utf8");

use URI::Escape;
use JSON qw( from_json );
use Encode;

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;
use Util;

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);

our $client_id = undef;
our $client_secret = undef;

# change this to 0 to always exit with success
our $exitnonzeroonerror = 1;
$exitnonzeroonerror = 0 if $username eq getEggdropUID();

our $apikey = undef;

if ( $#main::ARGV < 0 ) {
  print "usage: !imdb <search term>\n";
  exit $exitnonzeroonerror;
}

my $apikeyfile = $ENV{'HOME'} . "/.omdbapi";
if (-e ($apikeyfile)) {
  require($apikeyfile);
} else {
  print "error: unable to read file $apikeyfile\n";
  exit $exitnonzeroonerror;
}
if (not defined $apikey) {
  print "error: no API key set\n";
  exit $exitnonzeroonerror;
}

my $query_parameters = join(" ", @ARGV);
my $result = SearchMovies($query_parameters);

if (not defined $result or not defined $result->{totalResults}) {
  print "error: no result\n";
  exit $exitnonzeroonerror;
}

my $m = $result->{Search}[0];

if (not defined $m or not defined $m->{imdbID}) {
  print "no result.\n";
  exit 0;
}

my $imdbid = $m->{imdbID};

my $r = GetMovie($imdbid);

print bold($r->{Title}), " (", $r->{Year}, ")";
print " [$r->{Rated}]" if defined $r->{Rated};
print " $r->{imdbRating}", yellow("★") if defined $r->{imdbRating};
foreach my $rating (@{$r->{Ratings}}) {
  print " ", $rating->{Value}, "🍅" if $rating->{Source} eq "Rotten Tomatoes" and defined $rating->{Value};
}
print "; Genre: $r->{Genre}" if defined $r->{Genre};
print "; Dir: $r->{Director}" if defined $r->{Director};
print "; Starring: $r->{Actors}" if defined $r->{Actors};
print "; http://imdb.com/title/$imdbid";
print " ; Plot: $r->{Plot}" if defined $r->{Plot};
print "\n";

# "totalResults":"58"

exit 0;


sub MakeJSONRequest {
  my $requestURI = shift;

  open(HTTP, '-|', "curl --max-time 10 -s -k -L --compressed '$requestURI'");
  local $/;   # read entire file -- FIXME: potentially memory hungry
  binmode(HTTP, ":utf8");
  my $res = <HTTP>;
  close(HTTP);

  if (not defined $res or $res eq "") { die "error: request failed.\n" };

  # using from_json because $res is already utf-8
  my $decoded_json = from_json($res) or die "error: could not decode response\n";
  return $decoded_json;
}

sub GetMovie {
  my $imdbid = shift;
  my $encoded_parameters = uri_escape_utf8($imdbid);
  my $query_url = "http://www.omdbapi.com/?apikey=$apikey&i=$encoded_parameters";
  my $results = MakeJSONRequest($query_url);

  return $results;
}

sub SearchMovies {
  my $movieName = $_[0];
  my $encoded_parameters = uri_escape_utf8($movieName);
  my $query_url = "http://www.omdbapi.com/?apikey=$apikey&s=$encoded_parameters&type=movie";

  my $results = MakeJSONRequest($query_url);

  if ($results->{Response} eq "False") {
    if ($results->{Error} eq "Movie not found!") {
      print "no movie found\n";
      exit 0;
    }
    print "error: api error: $results->{Error}\n";
    exit $exitnonzeroonerror;
  };

  return $results;
}
