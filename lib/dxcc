#!/usr/bin/perl -w
#
# Lookup DXCC for given call or prefix.

# 2-clause BSD license.
# Copyright (c) 2018, 2019, 2020 molo1134@github. All rights reserved.
# Copyright (c) 2020 Andrew Rodland. All rights reserved.

use strict;

#use Time::HiRes qw(gettimeofday);

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;
use Location;
use Util;

# Retrieve from here: http://www.country-files.com/big-cty/
my $ctydat=$ENV{'HOME'} . "/.cty.dat";

# load mostwanted summary from $HOME/.mostwanted.txt, which will be populated
# by the scrapeMW() subroutine.
my $mostwantedfile=$ENV{'HOME'} . "/.mostwanted.txt";

my $maxage=604800; # 1 week

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);

# change this to 0 to always exit with success
my $exitnonzeroonerror = 1;
$exitnonzeroonerror = 0 if $username eq getEggdropUID();

## end config options

our ($mylat, $mylon, $localgrid);

my $loginfile = $ENV{'HOME'} . "/.qrzlogin";
if (-e ($loginfile)) {
  require($loginfile);
}

if ($#ARGV < 0 || length($ARGV[0]) == 0) {

  if ($username eq getEggdropUID()) {
    print "usage: !dxcc <callsign>|<prefix>|<name> [de <grid>|<lat>,<lon>|<qth>]\n";
  } else {
    print "usage: $0 <callsign>|<prefix>|<name> [de <grid>|<lat>,<lon>|<qth>]\n";
  }
  exit $exitnonzeroonerror;
}

my ($term, $de);
my $csv = 0;

my $i = 0;

while ($i <= $#ARGV) {
  if (!defined($de) and $ARGV[$i] =~ /^(--geo|de|from)$/i) {
    $i++;
    $de = $ARGV[$i];
    $i++;
    next;
  }
  if (defined($de) and $ARGV[$i] =~ /^--geo$/) {
    # in case we have "de XXX --geo abc,xyz"
    last;
  }
  if (defined($de)) {
    $de = $de . " " . $ARGV[$i];
    $i++;
    next;
  }
  $csv = 1 if $ARGV[$i] =~ /^--csv$/;
  if (not $ARGV[$i] =~ /^--/) {
    if (defined($term)) {
      $term = $term ." ". $ARGV[$i];
    } else {
      $term = $ARGV[$i];
    }
  }
  $i++;
}

$term =~ s/^\s*//;
$term =~ s/\s*$//;
$term = uc $term;

if (defined($de)) {
  my $degeo = argToCoords($de);
  ($mylat, $mylon) = split(',', $degeo) if defined $degeo;
}

if (defined($mylat)) {
  $localgrid = coordToGrid($mylat, $mylon);
}

updateCty() if (checkCtyDat() == 1);
scrapeMW() if (checkMW() == 1);

my $ref = getDxccDataRef(); # load data

# for debug
#foreach my $rec (@{$ref->{rec}}) {
#  #print "$prefix\n";
#  my ($length, $pattern, $prefix, $dxcc, $cq, $itu, $name, $cont, $lat, $lon, $tz) = split /\|/,$rec;
#
#  my $mw = $ref->{mwPfx}->{uc($dxcc)} || $ref->{mwNm}->{uc($name)};
#  if (!defined($mw)) {
#    #print "missing MW: $name: $dxcc\n" unless $name =~ /not DXCC/;
#  }
#}

# check if exact prefix found
if (defined $ref->{map}->{$term}) {
  my ($length, $pattern, $prefix, $dxcc, $cq, $itu, $name, $cont, $lat, $lon, $tz) = split /\|/,$ref->{map}->{$term};

  print bold($term), ": ", bold($name);
  print ": $cont CQ:$cq ITU:$itu";
  my $mw = $ref->{mwPfx}->{uc($dxcc)} || $ref->{mwNm}->{uc($name)};
  print " MW:" . $mw unless (!defined $mw);
  if (defined($mylat)) {
    my ($dist, $bearing) = distBearing($mylat, $mylon, $lat, $lon);
    printf(" -- %.1f km, %.0f° from %s", $dist, $bearing, $localgrid);
  }

  print "\n";
  exit 0;
}

# check if an entity is found by name -- needs to be at least 3 chars
if (length($term) >= 3) {
  my $matchterm = quotemeta($term);

  foreach my $rec (@{$ref->{rec}}) {
    my ($length, $pattern, $prefix, $dxcc, $cq, $itu, $name, $cont, $lat, $lon, $tz) = split /\|/,$rec;

    if ($name =~ m/$matchterm/i) {
      print bold($dxcc), ": ", bold($name);
      print ": $cont CQ:$cq ITU:$itu";
      my $mw = $ref->{mwPfx}->{uc($dxcc)} || $ref->{mwNm}->{uc($name)};
      print " MW:" . $mw unless (!defined $mw);
      if (defined($mylat)) {
        my ($dist, $bearing) = distBearing($mylat, $mylon, $lat, $lon);
        printf(" -- %.1f km, %.0f° from %s", $dist, $bearing, $localgrid);
      }
      print "\n";
      exit 0;
    }
  }
}

# If there is a space in the term, it is a name and should have matched the
# above. Error out.

if ($term =~ m/ /) {
  print "Name not found: $term\n";
  exit $exitnonzeroonerror;
}

foreach my $rec (@{$ref->{rec}}) {
  #print "$prefix\n";
  my ($length, $pattern, $prefix, $dxcc, $cq, $itu, $name, $cont, $lat, $lon, $tz) = split /\|/,$rec;

  if ($term =~ m/$pattern/i) {
    #print "FOUND: $pattern\n";
    #print "$rec\n";

    my $match = $term;
    $match =~ s/$pattern/bold($&)/e;
    my $mw = $ref->{mwPfx}->{uc($dxcc)} || $ref->{mwNm}->{uc($name)};

    if (not $csv) {
      print "$match: " . bold($name);
      print " ($dxcc)" unless $term eq $dxcc;
      print ": $cont CQ:$cq ITU:$itu";
      print " MW:" . $mw unless (!defined $mw);
      if (defined($mylat)) {
	my ($dist, $bearing) = distBearing($mylat, $mylon, $lat, $lon);
	printf(" -- %.1f km, %.0f° from %s", $dist, $bearing, $localgrid);
      }
      print "\n";
    } else {
      print "#call,country,dxcc_pfx,continent,cqzone,ituzone,mw\n";
      print "$term,$name,$dxcc,$cont,$cq,$itu,$mw\n";
    }
    exit 0;
  }

}

print "$term: no match\n";
exit $exitnonzeroonerror;

