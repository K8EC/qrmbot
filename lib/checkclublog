#!/usr/bin/perl
#
# 2-clause BSD license.
# Copyright (c) 2018, 2019, 2020 molo1134@github. All rights reserved.

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Colors;

use JSON qw( decode_json );
use File::Temp qw(tempfile);
use strict;

my $url = 'https://secure.clublog.org/clublog-users.json.zip';
my $userfile=$ENV{'HOME'} . "/.clublogusers.gz";
my $maxage=604800; # 1 week
my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);

# change this to 0 to always exit with success
my $exitnonzeroonerror = 1;
$exitnonzeroonerror = 0 if $username eq 'eggdrop';

sub updatezip {
  my (undef, $tmpfile) = tempfile();
  system "curl --max-time 10 -s -k -L -o $tmpfile '$url'";
  system "unzip -p $tmpfile clublog_users.json | gzip -c > $userfile";
  unlink $tmpfile;
}



if ($#ARGV < 0 || length($ARGV[0]) == 0) {
  if ($username eq 'eggdrop') {
    print "usage: !clublog <callsign> [logged call]\n";
  } else {
    print "usage: $0 <callsign> [logged call]\n";
  }
  exit $exitnonzeroonerror;
}

my $call = uc $ARGV[0];
$call =~ s/^\s*//;
$call =~ s/\s*$//;

my $call2 = undef;
if ($#ARGV >= 1) {
  $call2 = uc $ARGV[1];
  $call2 =~ s/^\s*//;
  $call2 =~ s/\s*$//;
}

if (defined $call2) {
  our $apikey;
  require ($ENV{HOME} . "/.clublogapikey");
  my $url = "https://clublog.org/logsearchjson.php?log=${call}&call=${call2}&api=$apikey";
  local $/;   # read entire file -- FIXME: potentially memory hungry
  open(JSON, '-|', "curl -k -L --max-time 10 --retry 1 -s '$url'");
  my $json = <JSON>;
  close(JSON);
  #print "$json\n";
  my $j = decode_json($json);
  if (ref($j) ne 'HASH') {
    print "$call2 not found in $call clublog\n";
    exit 0;
  } 
  print bold($call2), " in ", bold($call), " clublog: ";
  print "\n" if $username ne "eggdrop";
  foreach my $band (%{$j}) {
    my ($ph, $cw, $dt) = (0,0,0);
    next if not defined $j->{$band};
    $ph = $j->{$band}->{P} if defined $j->{$band}->{P};
    $cw = $j->{$band}->{C} if defined $j->{$band}->{C};
    $dt = $j->{$band}->{D} if defined $j->{$band}->{D};
    print bold("${band}m"), " - ";
    print "Ph: $ph" if $ph > 0;
    print ", " if $ph > 0 and ($cw > 0 or $dt > 0);
    print "CW: $cw" if $cw > 0;
    print ", " if $cw > 0 and $dt > 0;
    print "Dg: $dt" if $dt > 0;
    print "\n" if $username ne "eggdrop";
    print "; " if $username eq "eggdrop";
  }
  print "\n" if $username eq "eggdrop";
  exit 0;
}

my $now = time;
my $needzip = 0;
if ( ! -e $userfile ) {
  $needzip = 1;
} else {
  my (undef, undef, undef, undef, undef, undef, undef, $size, undef, $mtime, undef, undef, undef) = stat $userfile;
  if (defined $mtime) {
    my $age = $now - $mtime;
    if ($age > $maxage or $size == 0) {
      $needzip = 1;
    }
  } else {
    $needzip = 1;
  }
}

updatezip() if ($needzip == 1);

my %rec;

local $/;   # read entire file -- FIXME: potentially memory hungry
open (GZIP, '-|', "gzip -dc $userfile") or die "Can't open for reading: $!";
binmode(GZIP, ":utf8");
my $json = <GZIP>;
close(GZIP);
my $j = decode_json($json) or die "parse error: $json\n";
if (defined ($j->{$call})) {
  %rec = %{$j->{$call}};
}


#print scalar(keys(%rec)), "\n";
#print join (" ", keys(%rec)), "\n";

if (scalar(keys(%rec)) == 0 or
    (not defined $rec{firstqso} and
      not defined $rec{lastqso} and
      not defined $rec{lastupload})) {
  print "$call not found on clublog\n";
  exit 0;
}

# firstqso 1995-08-09 23:09:00
# lastqso 2018-07-01 13:09:00
# lastupload 2018-08-16 22:53:01
# locator JO02AE
# oqrs false

my ($start, undef) = split(" ",$rec{firstqso});
my ($end, undef) = split(" ",$rec{lastqso});
my ($upload, undef) = split(" ", $rec{lastupload});

print bold($call), ": clublog from $start to $end; last upload $upload";
print "; " . bold("OQRS") if $rec{oqrs} eq "true";
print "; grid $rec{locator}" if defined $rec{locator};
print "\n";

exit 0;
